name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BIRTHDATE: ${{ secrets.BIRTHDATE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js site
        run: npm run build

      - name: Prepare artifact for Pages
        run: |
          set -euo pipefail
          rm -rf out
          mkdir -p out

          echo "Prefer .next/output/static"
          if [ -d ".next/output/static" ]; then
            cp -a .next/output/static/. out/
            echo "Used .next/output/static"
          elif [ -d ".next/output" ]; then
            cp -a .next/output/. out/
            echo "Used .next/output"
          elif [ -d ".next/server" ]; then
            echo "Collecting from .next/server"
            mkdir -p out
            if [ -d ".next/server/app" ]; then
              find .next/server/app -type f -name '*.html' -print0 | while IFS= read -r -d '' f; do
                rel="${f#.next/server/app/}"
                dest="out/${rel}"
                mkdir -p "$(dirname "$dest")"
                cp "$f" "$dest"
              done
            fi
            if [ -d ".next/server/pages" ]; then
              find .next/server/pages -maxdepth 1 -type f -name '*.html' -print0 | while IFS= read -r -d '' f; do
                cp "$f" "out/$(basename "$f")"
              done
            fi
            # copy _next static assets (if present)
            if [ -d ".next/server/static" ]; then
              mkdir -p out/_next
              cp -a .next/server/static out/_next/static
            fi
          elif [ -n "$(find .next -type f -name '*.html' -print -quit || true)" ]; then
            echo "Collecting loose HTML under .next"
            find .next -type f -name '*.html' -print0 | while IFS= read -r -d '' f; do
              dest="out/${f#.next/}"
              mkdir -p "$(dirname "$dest")"
              cp "$f" "$dest"
            done
            if [ -d ".next/static" ]; then
              mkdir -p out/_next
              cp -a .next/static out/_next/static
            fi
          else
            echo "No static output found under .next. Listing .next for debugging:"
            ls -la .next || true
            echo "Build may have produced server-only output (not compatible with GitHub Pages)."
            exit 1
          fi

          # Ensure there's an index.html at site root
          if [ ! -f out/index.html ]; then
            candidate="$(find out -type f -name 'index.html' | head -n 1 || true)"
            if [ -n "$candidate" ]; then
              cp "$candidate" out/index.html
              echo "Copied candidate index: $candidate -> out/index.html"
            else
              anyhtml="$(find out -type f -name '*.html' | head -n 1 || true)"
              if [ -n "$anyhtml" ]; then
                cp "$anyhtml" out/index.html
                echo "Copied any html $anyhtml -> out/index.html"
              else
                echo "No HTML files found in out/ â€” cannot deploy to Pages."
                ls -la out || true
                exit 1
              fi
            fi
          fi

          # Ensure 404 exists
          if [ ! -f out/404.html ]; then
            notfound="$(find out -type f -iname '*not-found*.html' -print -quit || true)"
            if [ -n "$notfound" ]; then
              cp "$notfound" out/404.html
            fi
          fi

          echo "Final out/ preview (depth 3):"
          find out -maxdepth 3 -type d -print -exec ls -la {} \; || true
          echo "HTML count:"
          find out -type f -name '*.html' | wc -l || true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
